syntax = "proto3";

import "google/protobuf/timestamp.proto";

package server;
option go_package = "./gophkeeper";

service GophKeeper {
    rpc Ping(PingRequest) returns (PingResponse) {}
    rpc Registration(RegistrationRequest) returns (RegistrationResponse) {}
    rpc Authorization(AuthorizationRequest) returns (AuthorizationResponse) {}

    rpc FileUpload(stream FileUploadRequest) returns (FileUploadResponse) {}
    rpc FileDownload(FileDownloadRequest) returns (stream FileDownloadResponse) {}
    rpc FileDelete(FileDeleteRequest) returns (FileDeleteResponse) {}   
    rpc FileGetList(FileGetListRequest) returns (FileGetListResponse) {}
}
service NoteService {
    rpc NoteAdd(NoteAddRequest) returns (NoteAddResponse) {}
    rpc NoteGetList(NoteGetListRequest) returns (NoteGetListResponse) {}
    rpc NoteUpdate(NoteUpdateRequest) returns (NoteUpdateResponse) {}
    rpc NoteDelete(NoteDeleteRequest) returns (NoteDeleteResponse) {}
}

service CardService {
    rpc CardAdd(CardAddRequest) returns (CardAddResponse) {}
    rpc CardGetList(CardGetListRequest) returns (CardGetListResponse) {}
    rpc CardDelete(CardDeleteRequest) returns (CardDeleteResponse) {}
    rpc CardAddMetadata(CardAddMetadataRequest) returns (CardAddMetadataResponse) {}
}

// Ping
message PingRequest {}
message PingResponse {
    string message = 1;
}

// Token структура токена   
message Token {
    int64 userID = 1;
    string token = 2;
    google.protobuf.Timestamp createdAt = 3;
    google.protobuf.Timestamp expiredAt = 4;
}

//User структура пользователя
message User {
    int64 userID = 1;
    string username = 2;
    google.protobuf.Timestamp createdAt = 3;
    google.protobuf.Timestamp updatedAt = 4;
    google.protobuf.Timestamp deletedAt = 5;
}

//RegistrationRequest
message RegistrationRequest {
    string username = 1;
    string password = 2;
    string appName = 3;
    string role = 4;
}
message RegistrationResponse {
    Token accessToken = 1;
}

// Authorization
message AuthorizationRequest {
    string username = 1;
    string password = 2;
}
message AuthorizationResponse {
    Token accessToken = 1;
}

// File структура данных о пользовательском файле
message File {
    string fileID = 1;
    string userID = 2;
    string filename = 3;
    int64 size = 4;
    google.protobuf.Timestamp createdAt = 5;
    google.protobuf.Timestamp deletedAt = 6;
}

// FileInfo структура информации о файле
message FileInfo {
    string filename = 1;
    int64 size = 2;
}
// FileUpload
message FileUploadRequest {
    oneof file {
        FileInfo info = 1;
        bytes chunk = 2;
    }
}
message FileUploadResponse {
    string message = 1;
}

// FileDownload
message FileDownloadRequest {
    string filename = 1;
}
message FileDownloadResponse {
    bytes chunk = 1;
}

// FileDelete
message FileDeleteRequest {
    string filename = 1;
}
message FileDeleteResponse {
    int64 fileID = 1;
}

// FileGetList
message FileGetListRequest {}
message FileGetListResponse {
    repeated File files = 1;
}

// Note структура заметки
message Note {
    int64 noteID = 1;
    string userID = 2;
    string noteText = 3;
    repeated Metadata metadata = 4;
    google.protobuf.Timestamp createdAt = 5;
    google.protobuf.Timestamp updatedAt = 6;
    google.protobuf.Timestamp deletedAt = 7;
}

// NoteAdd
message NoteAddRequest {
    Note note = 1;
}
message NoteAddResponse {
    bool success = 1;
}

// NoteGetList
message NoteGetListRequest {}
message NoteGetListResponse {
    repeated Note notes = 1;
}

// NoteUpdate
message NoteUpdateRequest {
    Note note = 1;
}
message NoteUpdateResponse {
    bool success = 1;
}

// NoteDelete
message NoteDeleteRequest {
    int64 noteID = 1;
}
message NoteDeleteResponse {
    bool success = 1;
}

// Card структура карты
message Card {
    string cardNumber = 1;
    string cardHolder = 2;
    google.protobuf.Timestamp cardExpirationDate = 3;
    string cardCVV = 4;
    string cardBank = 5;
    string metadata = 6;
    int64 cardID = 7;
}

// CardAdd
message CardAddRequest {
    Card card = 1;
}
message CardAddResponse {
    int64 cardID = 1;
}

// CardGetList
message CardGetListRequest {}
message CardGetListResponse {
    repeated Card cards = 1;
}

// CardDelete
message CardDeleteRequest {
    int64 cardID = 1;
}
message CardDeleteResponse {
    bool success = 1;
}

message Metadata {
    string key = 1;
    string value = 2;
}
// CardAddMetadata
message CardAddMetadataRequest {
    int64 cardID = 1;
    repeated Metadata metadata = 2;
}
message CardAddMetadataResponse {
    bool success = 1;
}